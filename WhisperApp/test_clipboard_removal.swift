#!/usr/bin/env swift

import Foundation

// Test script to validate clipboard functionality removal

print("üß™ Testing Clipboard Functionality Removal")
print("====================================================")

// Test files to check
let filesToCheck = [
    ("WhisperApp/UI/Decrypt/DecryptView.swift", "DecryptView"),
    ("WhisperApp/UI/Decrypt/DecryptViewModel.swift", "DecryptViewModel"),
    ("WhisperApp/ContentView.swift", "ContentView")
]

var allTestsPassed = true

for (filePath, fileName) in filesToCheck {
    print("\nüìÅ Checking \(fileName)...")
    
    let fileURL = URL(fileURLWithPath: filePath)
    
    do {
        let content = try String(contentsOf: fileURL)
        
        // Test 1: Check if clipboard auto-population is removed from DecryptView
        if fileName == "DecryptView" {
            let hasClipboardAutoPopulation = content.contains("UIPasteboard.general.string") || 
                                           content.contains("Auto-populate input field")
            print("  ‚úÖ Clipboard auto-population removed: \(hasClipboardAutoPopulation ? "FAIL" : "PASS")")
            if hasClipboardAutoPopulation { allTestsPassed = false }
            
            let hasUIKitImport = content.contains("import UIKit")
            print("  ‚úÖ UIKit import removed: \(hasUIKitImport ? "FAIL" : "PASS")")
            if hasUIKitImport { allTestsPassed = false }
        }
        
        // Test 2: Check if clipboard banner is removed from ContentView
        if fileName == "ContentView" {
            let hasClipboardBanner = content.contains(".clipboardBanner()")
            print("  ‚úÖ Clipboard banner removed: \(hasClipboardBanner ? "FAIL" : "PASS")")
            if hasClipboardBanner { allTestsPassed = false }
            
            // Debug: Show what clipboard references were found
            if content.lowercased().contains("clipboard") {
                let lines = content.components(separatedBy: .newlines)
                for (index, line) in lines.enumerated() {
                    if line.lowercased().contains("clipboard") {
                        print("    üîç Found clipboard reference at line \(index + 1): \(line.trimmingCharacters(in: .whitespaces))")
                    }
                }
            } else {
                print("    ‚úÖ No clipboard references found in ContentView")
            }
        }
        
        // Test 3: Check if clipboard methods are removed from DecryptViewModel
        if fileName == "DecryptViewModel" {
            let hasCheckClipboard = content.contains("checkClipboard")
            print("  ‚úÖ checkClipboard method removed: \(hasCheckClipboard ? "FAIL" : "PASS")")
            if hasCheckClipboard { allTestsPassed = false }
            
            let hasDecryptFromClipboard = content.contains("decryptFromClipboard")
            print("  ‚úÖ decryptFromClipboard method removed: \(hasDecryptFromClipboard ? "FAIL" : "PASS")")
            if hasDecryptFromClipboard { allTestsPassed = false }
            
            let hasShowDetectionBanner = content.contains("showDetectionBanner")
            print("  ‚úÖ showDetectionBanner property removed: \(hasShowDetectionBanner ? "FAIL" : "PASS")")
            if hasShowDetectionBanner { allTestsPassed = false }
            
            let hasClipboardContent = content.contains("clipboardContent")
            print("  ‚úÖ clipboardContent property removed: \(hasClipboardContent ? "FAIL" : "PASS")")
            if hasClipboardContent { allTestsPassed = false }
        }
        
        // Test 4: Check for any remaining clipboard references
        let hasAnyClipboardRef = content.lowercased().contains("clipboard") && 
                                !content.contains("Copy message to clipboard") && // Allow copy functionality
                                !content.contains("copyDecryptedMessage") // Allow copy functionality
        if hasAnyClipboardRef {
            print("  ‚ö†Ô∏è  Warning: Found remaining clipboard references in \(fileName)")
            // Don't fail the test for this, just warn
        }
        
    } catch {
        print("  ‚ùå Error reading \(fileName): \(error)")
        allTestsPassed = false
    }
}

print("\nüéØ Overall Result: \(allTestsPassed ? "ALL TESTS PASSED ‚úÖ" : "SOME TESTS FAILED ‚ùå")")

if allTestsPassed {
    print("\nüéâ SUCCESS: All clipboard auto-detection functionality has been removed!")
    print("\nüìã What was removed:")
    print("1. ‚ùå DecryptView onAppear clipboard auto-population")
    print("2. ‚ùå ContentView clipboard detection banner")
    print("3. ‚ùå DecryptViewModel checkClipboard() method")
    print("4. ‚ùå DecryptViewModel decryptFromClipboard() method")
    print("5. ‚ùå DecryptViewModel showDetectionBanner property")
    print("6. ‚ùå DecryptViewModel clipboardContent property")
    print("7. ‚ùå Unnecessary UIKit import from DecryptView")
    print("\n‚úÖ What was preserved:")
    print("1. ‚úÖ Manual copy functionality (copyDecryptedMessage)")
    print("2. ‚úÖ Manual input and QR scan functionality")
    print("3. ‚úÖ All other DecryptView features")
    print("\nüîß The app will no longer automatically detect or populate clipboard content!")
} else {
    print("\n‚ùå FAILURE: Some clipboard functionality was not properly removed.")
    print("Please check the failed tests above and fix the remaining issues.")
}