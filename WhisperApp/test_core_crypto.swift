#!/usr/bin/env swift

import Foundation
import CryptoKit

/**
 * Core Cryptographic Component Test
 * Tests our core crypto without UI dependencies
 */

print("üîê Testing Core Cryptographic Components...")
print("=" * 50)

// Test 1: CryptoKit availability
print("1. Testing CryptoKit availability...")
do {
    let key = Curve25519.KeyAgreement.PrivateKey()
    let publicKey = key.publicKey
    print("   ‚úÖ X25519 key generation works")
    
    let signingKey = Curve25519.Signing.PrivateKey()
    let verifyingKey = signingKey.publicKey
    print("   ‚úÖ Ed25519 key generation works")
    
    // Test ChaCha20-Poly1305
    let symmetricKey = SymmetricKey(size: .bits256)
    let nonce = try ChaChaPoly.Nonce(data: Data(count: 12))
    let plaintext = "Hello, Whisper!".data(using: .utf8)!
    
    let sealedBox = try ChaChaPoly.seal(plaintext, using: symmetricKey, nonce: nonce)
    let decrypted = try ChaChaPoly.open(sealedBox, using: symmetricKey)
    
    guard decrypted == plaintext else {
        throw TestError.decryptionFailed
    }
    
    print("   ‚úÖ ChaCha20-Poly1305 encryption/decryption works")
    
} catch {
    print("   ‚ùå CryptoKit test failed: \(error)")
    exit(1)
}

// Test 2: Key derivation
print("\n2. Testing key derivation...")
do {
    let salt = Data(repeating: 0x01, count: 16)
    let ikm = Data(repeating: 0x02, count: 32)
    let info = "whisper-test".data(using: .utf8)!
    
    let derivedKey = HKDF<SHA256>.deriveKey(
        inputKeyMaterial: SymmetricKey(data: ikm),
        salt: salt,
        info: info,
        outputByteCount: 32
    )
    
    print("   ‚úÖ HKDF key derivation works")
    
} catch {
    print("   ‚ùå Key derivation test failed: \(error)")
    exit(1)
}

// Test 3: Digital signatures
print("\n3. Testing digital signatures...")
do {
    let signingKey = Curve25519.Signing.PrivateKey()
    let message = "Test message for signing".data(using: .utf8)!
    
    let signature = try signingKey.signature(for: message)
    let isValid = signingKey.publicKey.isValidSignature(signature, for: message)
    
    guard isValid else {
        throw TestError.signatureVerificationFailed
    }
    
    print("   ‚úÖ Ed25519 signature generation and verification works")
    
} catch {
    print("   ‚ùå Digital signature test failed: \(error)")
    exit(1)
}

// Test 4: Key agreement
print("\n4. Testing key agreement...")
do {
    let aliceKey = Curve25519.KeyAgreement.PrivateKey()
    let bobKey = Curve25519.KeyAgreement.PrivateKey()
    
    let aliceSharedSecret = try aliceKey.sharedSecretFromKeyAgreement(with: bobKey.publicKey)
    let bobSharedSecret = try bobKey.sharedSecretFromKeyAgreement(with: aliceKey.publicKey)
    
    // Derive symmetric keys from shared secrets
    let aliceSymmetricKey = aliceSharedSecret.hkdfDerivedSymmetricKey(
        using: SHA256.self,
        salt: Data(),
        sharedInfo: Data(),
        outputByteCount: 32
    )
    
    let bobSymmetricKey = bobSharedSecret.hkdfDerivedSymmetricKey(
        using: SHA256.self,
        salt: Data(),
        sharedInfo: Data(),
        outputByteCount: 32
    )
    
    // Keys should be identical
    let aliceKeyData = aliceSymmetricKey.withUnsafeBytes { Data($0) }
    let bobKeyData = bobSymmetricKey.withUnsafeBytes { Data($0) }
    
    guard aliceKeyData == bobKeyData else {
        throw TestError.keyAgreementFailed
    }
    
    print("   ‚úÖ X25519 key agreement works")
    
} catch {
    print("   ‚ùå Key agreement test failed: \(error)")
    exit(1)
}

// Test 5: Secure random generation
print("\n5. Testing secure random generation...")
do {
    var randomData1 = Data(count: 32)
    var randomData2 = Data(count: 32)
    
    let result1 = randomData1.withUnsafeMutableBytes { bytes in
        SecRandomCopyBytes(kSecRandomDefault, 32, bytes.bindMemory(to: UInt8.self).baseAddress!)
    }
    
    let result2 = randomData2.withUnsafeMutableBytes { bytes in
        SecRandomCopyBytes(kSecRandomDefault, 32, bytes.bindMemory(to: UInt8.self).baseAddress!)
    }
    
    guard result1 == errSecSuccess && result2 == errSecSuccess else {
        throw TestError.randomGenerationFailed
    }
    
    guard randomData1 != randomData2 else {
        throw TestError.randomCollision
    }
    
    print("   ‚úÖ Secure random generation works")
    
} catch {
    print("   ‚ùå Random generation test failed: \(error)")
    exit(1)
}

// Test 6: Hash functions
print("\n6. Testing hash functions...")
do {
    let message = "Test message for hashing".data(using: .utf8)!
    
    let sha256Hash = SHA256.hash(data: message)
    let sha256Data = Data(sha256Hash)
    
    guard sha256Data.count == 32 else {
        throw TestError.hashLengthIncorrect
    }
    
    // Test BLAKE2s (if available through CryptoKit extensions)
    // For now, just verify SHA256 works
    print("   ‚úÖ SHA256 hashing works")
    
} catch {
    print("   ‚ùå Hash function test failed: \(error)")
    exit(1)
}

print("\n" + "=" * 50)
print("üéâ ALL CORE CRYPTOGRAPHIC TESTS PASSED!")
print("‚úÖ CryptoKit integration is working correctly")
print("‚úÖ All required algorithms are available")
print("‚úÖ Key generation and derivation work")
print("‚úÖ Encryption and decryption work")
print("‚úÖ Digital signatures work")
print("‚úÖ Secure random generation works")

print("\nüìã Next Steps:")
print("1. Core crypto components are validated ‚úÖ")
print("2. Need to create clean Xcode project for iOS build")
print("3. Test UI components on device")
print("4. Validate biometric integration")

enum TestError: Error {
    case decryptionFailed
    case signatureVerificationFailed
    case keyAgreementFailed
    case randomGenerationFailed
    case randomCollision
    case hashLengthIncorrect
}

extension String {
    static func *(lhs: String, rhs: Int) -> String {
        return String(repeating: lhs, count: rhs)
    }
}