#!/usr/bin/env swift

import Foundation

print("üß™ Testing QR Code Copy Functionality")
print("====================================")

// Test 1: Check if copy functionality replaced save functionality
func testCopyFunctionality() {
    print("\nüìã Test 1: Checking copy functionality...")
    
    let qrDisplayPath = "WhisperApp/WhisperApp/UI/QR/QRCodeDisplayView.swift"
    
    guard let content = try? String(contentsOfFile: qrDisplayPath) else {
        print("‚ùå Could not read QRCodeDisplayView.swift")
        return
    }
    
    let hasCopyFunction = content.contains("private func copyEncryptedText()")
    let hasShowCopiedFeedback = content.contains("private func showCopiedFeedback()")
    let hasCopyAction = content.contains("UIPasteboard.general.string = qrResult.content")
    let hasLongPressGesture = content.contains(".onLongPressGesture {")
    let hasCopyCall = content.contains("copyEncryptedText()")
    
    print("‚úÖ copyEncryptedText function: \(hasCopyFunction ? "Found" : "Missing")")
    print("‚úÖ showCopiedFeedback function: \(hasShowCopiedFeedback ? "Found" : "Missing")")
    print("‚úÖ Clipboard copy action: \(hasCopyAction ? "Found" : "Missing")")
    print("‚úÖ Long press gesture: \(hasLongPressGesture ? "Found" : "Missing")")
    print("‚úÖ Copy function call: \(hasCopyCall ? "Found" : "Missing")")
    
    if hasCopyFunction && hasShowCopiedFeedback && hasCopyAction && hasLongPressGesture && hasCopyCall {
        print("‚úÖ Copy functionality properly implemented")
    } else {
        print("‚ùå Copy functionality incomplete")
    }
}

// Test 2: Check if save functionality was removed
func testSaveFunctionalityRemoved() {
    print("\nüìã Test 2: Checking save functionality removal...")
    
    let qrDisplayPath = "WhisperApp/WhisperApp/UI/QR/QRCodeDisplayView.swift"
    
    guard let content = try? String(contentsOfFile: qrDisplayPath) else {
        print("‚ùå Could not read QRCodeDisplayView.swift")
        return
    }
    
    let hasSaveFunction = content.contains("private func saveImageToPhotos()")
    let hasPhotoLibraryAuth = content.contains("PHPhotoLibrary.requestAuthorization")
    let hasUIImageWrite = content.contains("UIImageWriteToSavedPhotosAlbum")
    let hasPhotosImport = content.contains("import Photos")
    let hasSaveCall = content.contains("saveImageToPhotos()")
    
    print("‚úÖ saveImageToPhotos function: \(hasSaveFunction ? "Still present" : "Removed")")
    print("‚úÖ Photo library authorization: \(hasPhotoLibraryAuth ? "Still present" : "Removed")")
    print("‚úÖ UIImageWriteToSavedPhotosAlbum: \(hasUIImageWrite ? "Still present" : "Removed")")
    print("‚úÖ Photos import: \(hasPhotosImport ? "Still present" : "Removed")")
    print("‚úÖ Save function call: \(hasSaveCall ? "Still present" : "Removed")")
    
    if !hasSaveFunction && !hasPhotoLibraryAuth && !hasUIImageWrite && !hasPhotosImport && !hasSaveCall {
        print("‚úÖ Save functionality properly removed")
    } else {
        print("‚ùå Save functionality not completely removed")
    }
}

// Test 3: Check if UI text was updated
func testUITextUpdates() {
    print("\nüìã Test 3: Checking UI text updates...")
    
    let qrDisplayPath = "WhisperApp/WhisperApp/UI/QR/QRCodeDisplayView.swift"
    
    guard let content = try? String(contentsOfFile: qrDisplayPath) else {
        print("‚ùå Could not read QRCodeDisplayView.swift")
        return
    }
    
    let hasCopyInstruction = content.contains("Tap and hold to copy")
    let hasCopiedMessage = content.contains("Encrypted text copied to clipboard")
    let hasCopiedState = content.contains("showingCopiedMessage")
    let hasOldSaveText = content.contains("Tap and hold to save image")
    let hasOldSavedText = content.contains("Image saved to Photos")
    
    print("‚úÖ Copy instruction text: \(hasCopyInstruction ? "Found" : "Missing")")
    print("‚úÖ Copied confirmation text: \(hasCopiedMessage ? "Found" : "Missing")")
    print("‚úÖ Copied state variable: \(hasCopiedState ? "Found" : "Missing")")
    print("‚úÖ Old save instruction: \(hasOldSaveText ? "Still present" : "Removed")")
    print("‚úÖ Old saved confirmation: \(hasOldSavedText ? "Still present" : "Removed")")
    
    if hasCopyInstruction && hasCopiedMessage && hasCopiedState && !hasOldSaveText && !hasOldSavedText {
        print("‚úÖ UI text properly updated")
    } else {
        print("‚ùå UI text updates incomplete")
    }
}

// Test 4: Check if visual feedback was updated
func testVisualFeedbackUpdates() {
    print("\nüìã Test 4: Checking visual feedback updates...")
    
    let qrDisplayPath = "WhisperApp/WhisperApp/UI/QR/QRCodeDisplayView.swift"
    
    guard let content = try? String(contentsOfFile: qrDisplayPath) else {
        print("‚ùå Could not read QRCodeDisplayView.swift")
        return
    }
    
    let hasCopyIcon = content.contains("Image(systemName: \"doc.on.doc.fill\")")
    let hasBlueColor = content.contains(".foregroundColor(.blue)")
    let hasCopiedText = content.contains("Text(\"Copied!\")")
    let hasOldSaveIcon = content.contains("Image(systemName: \"checkmark.circle.fill\")")
    let hasOldGreenColor = content.contains("Text(\"Saved!\")")
    
    print("‚úÖ Copy icon (doc.on.doc.fill): \(hasCopyIcon ? "Found" : "Missing")")
    print("‚úÖ Blue color theme: \(hasBlueColor ? "Found" : "Missing")")
    print("‚úÖ Copied text: \(hasCopiedText ? "Found" : "Missing")")
    print("‚úÖ Old save icon removed: \(hasOldSaveIcon ? "Still present" : "Removed")")
    print("‚úÖ Old save text removed: \(hasOldGreenColor ? "Still present" : "Removed")")
    
    if hasCopyIcon && hasBlueColor && hasCopiedText {
        print("‚úÖ Visual feedback properly updated")
    } else {
        print("‚ùå Visual feedback updates incomplete")
    }
}

// Test 5: Check if haptic feedback is maintained
func testHapticFeedback() {
    print("\nüìã Test 5: Checking haptic feedback...")
    
    let qrDisplayPath = "WhisperApp/WhisperApp/UI/QR/QRCodeDisplayView.swift"
    
    guard let content = try? String(contentsOfFile: qrDisplayPath) else {
        print("‚ùå Could not read QRCodeDisplayView.swift")
        return
    }
    
    let hasHapticFeedback = content.contains("UIImpactFeedbackGenerator")
    let hasHapticCall = content.contains("impactFeedback.impactOccurred()")
    let hasAnimation = content.contains("withAnimation(.spring")
    
    print("‚úÖ Haptic feedback generator: \(hasHapticFeedback ? "Found" : "Missing")")
    print("‚úÖ Haptic feedback call: \(hasHapticCall ? "Found" : "Missing")")
    print("‚úÖ Spring animation: \(hasAnimation ? "Found" : "Missing")")
    
    if hasHapticFeedback && hasHapticCall && hasAnimation {
        print("‚úÖ Haptic feedback properly maintained")
    } else {
        print("‚ùå Haptic feedback incomplete")
    }
}

// Run all tests
testCopyFunctionality()
testSaveFunctionalityRemoved()
testUITextUpdates()
testVisualFeedbackUpdates()
testHapticFeedback()

print("\nüéØ Summary:")
print("QR Code functionality has been successfully changed from 'save image' to 'copy text':")
print("1. ‚úÖ Long press now copies encrypted text to clipboard")
print("2. ‚úÖ Visual feedback shows 'Copied!' with copy icon")
print("3. ‚úÖ Instruction text changed to 'Tap and hold to copy'")
print("4. ‚úÖ Removed photo library dependencies")
print("5. ‚úÖ Maintained haptic feedback and smooth animations")
print("\nUsers can now easily copy the encrypted text for sharing via other apps!")