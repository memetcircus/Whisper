#!/usr/bin/env swift

import Foundation

// Test the ContactListViewModel build fix

print("üß™ Testing ContactListViewModel Build Fix")
print(String(repeating: "=", count: 50))

// Read the ContactListViewModel file
let contactListViewModelPath = "WhisperApp/UI/Contacts/ContactListViewModel.swift"

guard let content = try? String(contentsOfFile: contactListViewModelPath) else {
    print("‚ùå Could not read ContactListViewModel.swift")
    exit(1)
}

print("\nüîç Checking for build error fixes...")

// Check for the concrete type instead of protocol type
let hasConcreteType = content.contains("private let policyManager: UserDefaultsPolicyManager")
print("  \(hasConcreteType ? "‚úÖ" : "‚ùå") Uses concrete UserDefaultsPolicyManager type")

// Check for proper initialization
let hasProperInit = content.contains("self.policyManager = UserDefaultsPolicyManager()")
print("  \(hasProperInit ? "‚úÖ" : "‚ùå") Proper policyManager initialization")

// Check for showOnlyVerifiedContacts access
let hasPropertyAccess = content.contains("policyManager.showOnlyVerifiedContacts")
print("  \(hasPropertyAccess ? "‚úÖ" : "‚ùå") showOnlyVerifiedContacts property access")

// Check for key rotation detection logic (our main fix)
let hasKeyRotationDetection = content.contains("findExistingContactForKeyRotation")
print("  \(hasKeyRotationDetection ? "‚úÖ" : "‚ùå") Key rotation detection logic present")

// Check for withKeyRotation call
let hasWithKeyRotationCall = content.contains("withKeyRotation(")
print("  \(hasWithKeyRotationCall ? "‚úÖ" : "‚ùå") withKeyRotation method call present")

print("\nüéØ Build Fix Status:")
let buildFixComplete = hasConcreteType && hasProperInit && hasPropertyAccess
let keyRotationFixComplete = hasKeyRotationDetection && hasWithKeyRotationCall

if buildFixComplete && keyRotationFixComplete {
    print("‚úÖ ALL FIXES COMPLETE!")
    print("  ‚úÖ Build error fixed - PolicyManager type issue resolved")
    print("  ‚úÖ Key rotation detection implemented")
    print("  ‚úÖ Duplicate contact prevention active")
} else {
    print("‚ùå Some fixes incomplete:")
    if !buildFixComplete {
        print("  ‚ùå Build error not fully fixed")
    }
    if !keyRotationFixComplete {
        print("  ‚ùå Key rotation detection not complete")
    }
}

print("\nüîß Expected Behavior:")
print("- Build should compile without PolicyManager errors")
print("- Key rotation should update existing contact instead of creating duplicate")
print("- Trust level should reset to unverified on key rotation")

print("\n" + String(repeating: "=", count: 50))
print("Test completed!")